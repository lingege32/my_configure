priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)" i
std::map<${1:key}, ${2:value}> map${3};
endsnippet

snippet pa "std::pair (v)" i
std::pair<${1:int},${2:int}> pair${3};
endsnippet
snippet vec "std::vector (v)" i
std::vector<${1:char}> v${2};
endsnippet

snippet li "std::list (v)" i
std::list<${1:char}> list${2};
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

snippet class "class" b
class ${1:class}C
{
	private:

	public: //ctor dtor
		$1C()                      = default;
		$1C(const $1C&)            = default;
		$1C($1C&&)                 = default;
		$1C& operator=(const $1C&) = default;
		$1C& operator=($1C&&)      = default;
		virtual ~$1C()             = default;
	public:  // Setter
	public:  // Getter
	public:  // public function
	private: // private function
};
endsnippet
snippet struct "struct" b
struct ${1:struct}S
{
	$1S()                      = default;
	$1S(const $1S&)            = default;
	$1S($1S&&)                 = default;
	$1S& operator=(const $1S&) = default;
	$1S& operator=($1S&&)      = default;
	virtual ~$1S()             = default;
};
endsnippet



snippet *** "fnc and command" b
${1}
{
	/*********************************************************
	 * $1
	 * ${2}
	 *********************************************************/
}

endsnippet

snippet ** "command" b
/************************************************************
 * ${1}
 ************************************************************/
endsnippet

snippet sta "static_cast" i
static_cast<${1}>(${2})
endsnippet

snippet for "for loop" i
for(${1} ; ${2} ; ${3})
{
	${4}
}
endsnippet

snippet if "if" b
if(${1})
{
}
endsnippet

snippet elif "else if" b
else if(${1})
{
}
endsnippet

snippet else "else" b
else{
	${1}
}
endsnippet

snippet  limit "numeric_limit" i
std::numeric_limits<${1}>::${2}
endsnippet

snippet  inc "include" b
#include <${1}>
endsnippet

snippet  lambda "lambda function" i
[$1]($2) -> $3{
	$4
};
endsnippet

snippet  sha "shared_ptr" i
std::shared_ptr<${1}> ${2}
endsnippet

snippet  uni "unique_ptr" i
std::unique_ptr<${1}> ${2}
endsnippet

snippet  wk "unique_ptr" i
std::weak_ptr<${1}> ${2}
endsnippet

snippet  inh "include" b
#include "${1}"
endsnippet

snippet  ifdef "ifndef" b
#ifdef ${1}

#endif //$1
endsnippet
snippet  def "header file" b
#ifndef ${1}
#define $1

#endif //$1
endsnippet

snippet  color "print color in cpp" i
\e[39;38;5;${1:255}m
endsnippet
snippet  color0 "font type" i
\e[39;38;0;${1:1}m
endsnippet

