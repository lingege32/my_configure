
    "let g:ale_linters = {'c': ['clangd'], 'cpp': ['clangd'], 'rust': ['analyzer']}
    "nnoremap <Leader>] :ALEGoToDefinition<CR>
    "let g:ale_cpp_clangd_options = '--background-index --log=info --header-insertion=iwyu '
    "call ale#Set('cpp_clangd_options', '')
    "set omnifunc=ale#completion#OmniFunc
    "imap <C-n> <Plug>(ale_complete)



"let g:lsp_semantic_enabled = 1
let g:ale_disable_lsp = 1
let g:lsp_log_verbose=1
let g:lsp_log_file = expand('vim-lsp.log')

let g:lsp_document_code_action_signs_enabled=0
let g:lsp_completion_documentation_delay = 0
"let g:lsp_diagnostics_enabled = 0
augroup lsp_clangd
    autocmd!
    autocmd User lsp_setup call lsp#register_server({
                \ 'name':'clangd',
                \ 'cmd': {server_info->['clangd', '--pretty', '--log=info', '--background-index', '--clang-tidy=0']},
                \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
                \ })
    autocmd FileType c setlocal omnifunc=lsp#complete
    autocmd FileType cpp setlocal omnifunc=lsp#complete
    autocmd FileType objc setlocal omnifunc=lsp#complete
    autocmd FileType objcpp setlocal omnifunc=lsp#complete
augroup end


augroup lsp_clangd
    autocmd!
    autocmd User lsp_setup call lsp#register_server({
                \ 'name':'clangd',
                \ 'cmd': {server_info->['clangd', '--header-insertion=never', '--pretty', '--log=info', '--background-index', '--resource-dir=/depot/tools/clang/clang710_gcc730/linux64/lib/clang/7.1.0', '--query-driver=/depot/qsc/QSCT/GCC/bin/g++', '-index-file=clangd.dex']},
                \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
                \ })
    autocmd FileType c setlocal omnifunc=lsp#complete
    autocmd FileType cpp setlocal omnifunc=lsp#complete
    autocmd FileType objc setlocal omnifunc=lsp#complete
    autocmd FileType objcpp setlocal omnifunc=lsp#complete
augroup end


let g:lsp_cxx_hl_log_file = 'vim-lsp-cxx-hl.log'
let g:lsp_cxx_hl_verbose_log = 1
